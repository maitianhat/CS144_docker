#!/bin/bash
#set -x

SCRIPT_DIR=$(cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd)

maindir=""
container_name=cs144-container
network_name=cs144-network
default_user="cs144-user"

image_name=cs144
docker_dir="${SCRIPT_DIR}/docker"

clean=false
verbose=false

# Set automatically by platform detection
tag="latest"
platform=linux/amd64

container_runtime=docker

if stat --format %i / > /dev/null 2>&1; then
    statformatarg="--format"
else
    statformatarg="-f"
fi
myfileid=`stat $statformatarg %d:%i "${BASH_SOURCE[0]}" 2> /dev/null`

dir="`pwd`"
subdir=""
while test "$dir" != / -a "$dir" != ""; do
    thisfileid=`stat $statformatarg %d:%i "$dir"/$(basename ${BASH_SOURCE[0]}) 2> /dev/null`
    if test -n "$thisfileid" -a "$thisfileid" = "$myfileid"; then
        maindir="$dir"
        break
    fi
    subdir="/`basename "$dir"`$subdir"
    dir="`dirname "$dir"`"
done

if test -z "$maindir" && expr "${BASE_SOURCE[0]}" : / >/dev/null 2>&1; then
    maindir="`dirname "${BASE_SOURCE[0]}"`"
    subdir=""
fi

if test -z "$maindir"; then
    echo "Error: could not determine your directory."
    exit 1
fi

vexec()
{
    if $verbose; then
        echo "$@"
    fi
    "$@"
}

do_info()
{
    echo "Expected container runtime: ${container_runtime}"
    $container_runtime --version
    $container_runtime info
}

has_container()
{
    [ $( $container_runtime ps -a | grep $container_name | wc -l ) -gt 0 ]
}

remove_containers()
{
    local _name
    _name="${1:-${container_name}}"
    echo "Removing all existing ${container_name} containers..."
    vexec $container_runtime ps -a -f name=${_name} --format "{{.ID}}" | while read line ; do $container_runtime rm --force $line ; done
}

stop_container()
{
    local _name
    _name="${1:-${container_name}}"

    vexec $container_runtime stop "${_name}"
}

start_container()
{
    echo "Entering existing container"
    echo "(To reset this container on startup, run with --clean)"

    $container_runtime start ${container_name}
    run_shell
}

run_in_container()
{
    $container_runtime exec -it $container_name $@
}

run_shell() {
    run_in_container "/bin/bash"
}

has_network() {
    local rv
    rv=0
    $($container_runtime network inspect "${network_name}" > /dev/null 2>&1) || rv=$?
    if [[ $rv  == 0 ]]; then
    return 0
    else
    return 1
    fi
}

create_network() {
    if ! has_network; then
    echo "Creating container-local network ${network_name}"
    $container_runtime network create "${network_name}"
    else
    echo "Network ${network_name} already exists"
    fi
}

get_network_info() {
    vexec $container_runtime network inspect "${network_name}"
}

remove_network() {
    vexec $container_runtime network rm "${network_name}"
}

start_new_container() {

    uidflags=
    hostflags=
    user_home="/home/${default_user}"
    hostflags="--add-host=host.docker.internal:host-gateway"

    create_network

    echo $uidflags
    echo $hostflags
    echo "user_home is $user_home"

    vexec $container_runtime run -it \
      --name $container_name \
      --platform $platform \
      --network "${network_name}" --network-alias "[${container_name}]" \
      --privileged \
      $uidflags $hostflags \
      --security-opt seccomp=unconfined \
      --cap-add=SYS_PTRACE --cap-add=NET_ADMIN \
      -v "$maindir/home":"${user_home}" \
      -w "${user_home}" \
      "${image_name}:${tag}"
}

do_start_or_run() {
    if $clean; then
    remove_containers && start_new_container
    elif has_container; then
    start_container
    else
    start_new_container
    fi
}

build_image() {
    local build_file_prefix
    local build_user

    build_file_prefix=Dockerfile
    build_user=$default_user

    echo "image tag -> ${image_name}:${tag}"

    vexec $container_runtime build -t "${image_name}:${tag}" \
            -f "${build_file_prefix}" --platform linux/amd64 \
            --build-arg USER=$bulid_user \
            .
}

enter_build_dir() {
    pushd "${docker_dir}"
}

leave_build_dir() {
    popd
}

remove_image() {
    $container_runtime image rm --force "${image_name}:${tag}"
}

do_help()
{
    cat <<EOF
Usage $0: [--verbose] [--clean] [--debug] [command] [command opts ...]
Top-level options:
 --verbose  Execute docker with verbose output
 --clean    Discard current container state when using 'start'
 --debug    Use to show execution of this script for debugging

Commands:
 setup        Update the container image (normal first time setup)
                - If container image exists, runs 'clean' and updates to latest
 start        Start the container (requires 'setup' first)
 stop         Stop the container
 clean        Remove container state (revert state to image built with 'setup')
 reset        Remove container state and restart (same as 'clean+start')
 clean-image  Remove all container state and the image (must 'setup' again)
 reset-all    Same as clean-image+setup+start
 clean-old    Discard containers generated with old versions of this script
 build-image  Build the container image locally (development first time setup)
 push-image   Push image to repository (development only)

If no command is specified, the default is 'start'.
EOF
}

main()
{
    POSITIONAL=()
    while [[ $# -gt 0 ]]; do
    key=$1
    case $key in
        --verbose|-v)
        shift
        verbose=true
        ;;
        --clean|-C)
        shift
        clean=true
        ;;
        --debug)
        shift
        set -x
        ;;
        --help)
        shift
        do_help
        exit 0
        ;;
        *)
        POSITIONAL+=("$1")
        shift
    esac
    done
    set -- "${POSITIONAL[@]}"

    # Default subcommand
    if [[ $# == 0 ]]; then
    do_start_or_run
    exit 0
    fi

    # Subcommands
    case $1 in
    help)
        do_help
        exit 0
        ;;
    start|run)
        shift
        do_start_or_run $@
        ;;
    shell)
        shift
        run_shell $@
        ;;
    stop)
        shift
        stop_container $@
        ;;
    clean)
        shift
        remove_containers $@
        ;;
    reset)
        shift
        remove_containers
        do_start_or_run $@
        ;;
    build|build-image|manual-build)
        shift
        remove_containers

        enter_build_dir
        build_image $@ || true
        leave_build_dir
        ;;
    remove-image|clean-image|reset-image)
        shift
        remove_containers "${container_name}"
        remove_image $@
        ;;
    info)
        shift
        do_info $@
        ;;
    *)
        echo "Invalid command $1"
        do_help
        exit 1
        ;;
    esac
}

main $@
